name: Terraform Format Check

on:
  pull_request:
    types:
      - opened
      - synchronize  # Triggered on push to the PR
    paths:
      - '**/*.tf'    # Only trigger when .tf files are changed

jobs:
  terraform-fmt-check:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the PR
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to compare with the base branch

      # Step 2: Fetch base branch for comparison
      - name: Fetch base branch
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}

      # Step 3: List changed .tf files
      - name: Get changed .tf files
        id: get_tf_files
        run: |
          git diff --name-only origin/${{ github.event.pull_request.base.ref }} HEAD | grep '.tf$' || true

      # Step 4: Check if there are any changed .tf files
      - name: Exit if no .tf files changed
        if: steps.get_tf_files.outputs.files == ''
        run: echo "No .tf files were changed. Exiting."
      
      # Step 5: Run terraform fmt check on the modified .tf files
      - name: Run terraform fmt check
        id: fmt_check
        run: |
          changed_files=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} HEAD | grep '.tf$' || true)
          failed_files=()
          for file in $changed_files; do
            terraform fmt -check "$file" || failed_files+=("$file")
          done
          
          # Save the result of failed files for the next step
          echo "failed_files=${failed_files[@]}" >> $GITHUB_ENV

      # Step 6: Post a comment to the PR with the list of unformatted files
      - name: Comment on PR if there are unformatted files
        if: env.failed_files != ""
        uses: actions/github-script@v6
        with:
          script: |
            const failedFiles = process.env.failed_files.split(" ");
            if (failedFiles.length > 0) {
              const fileList = failedFiles.map(file => `- \`${file}\``).join('\n');
              const commentBody = `ðŸš¨ The following .tf files are not formatted properly:\n\n${fileList}\n\nPlease run \`terraform fmt <file>\` to fix the formatting issues.`;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

      # Step 7: Fail the job if there are unformatted files
      - name: Fail if unformatted files exist
        if: env.failed_files != ""
        run: |
          echo "There are unformatted .tf files. Failing the job."
          exit 1
