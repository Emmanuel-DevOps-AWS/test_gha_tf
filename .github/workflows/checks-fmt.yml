name: Terraform Format Check

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**/*.tf'
  push:
    paths:
      - '**/*.tf'

jobs:
  terraform-fmt:
    name: Check Terraform Format and Comment on PR (Only on Failure)
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      # Step 1: Checkout the repository with full history
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper comparison

      # Step 2: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Specify the desired Terraform version

      # Step 3: Fetch base branch for comparison
      - name: Fetch base branch
        run: |
          git fetch origin
          git checkout ${{ github.base_ref }}

      # Step 4: Run terraform fmt -check on all changed .tf files and capture the output
      - name: Run terraform fmt -check and capture output
        run: |
          # Initialize an empty variable to store results
          failed_files=""
          # Check each changed .tf file
          git diff --name-only ${{ github.base_ref }} -- | grep '\.tf$' | while IFS= read -r file; do
            terraform fmt -check "$file"
            if [ $? -ne 0 ]; then
              failed_files="$failed_files\n❌ \`$file\` is not properly formatted. Please run \`terraform fmt $file\` to fix it."
            fi
          done
          # Save failed files list to a file for use in the next step
          echo "$failed_files" > fmt-output.txt

          # Write failure flag to a file for later steps to check
          if [ -n "$failed_files" ]; then
            echo "true" > terraform_failed.txt
          else
            echo "false" > terraform_failed.txt
          fi

      # Step 5: Post PR Comment if files failed formatting
      - name: Post PR Comment if files failed formatting
        if: ${{ steps.check_failure.outputs.is_failure == 'true' }}
        run: |
          if grep -q "true" terraform_failed.txt; then
            const output = readFileSync('fmt-output.txt', 'utf8');
            gh pr comment ${{ github.event.pull_request.number }} --body "Terraform format check failed for the following files:\n${output}"
          fi

      # Step 6: Fail the job if there are failed files
      - name: Fail if files are not formatted
        run: |
          if grep -q "true" terraform_failed.txt; then
            exit 1
          fi
