name: Terraform Format Check

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**/*.tf'
      
jobs:
  terraform-fmt:
    name: Check Terraform Format and Comment on PR (Only on Failure)
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper comparison

      # Step 2: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Specify the desired Terraform version

      # Step 3: Fetch base branch for comparison
      - name: Fetch base branch
        run: |
          git fetch origin ${{ github.base_ref }}

      # Step 4: Run terraform fmt -check on all changed .tf files and capture the output
      - name: Run terraform fmt -check and capture output
        id: fmt
        run: |
          # Initialize an empty variable to store results
          failed_files=""
          
          # Prevent the script from exiting on non-zero exit codes
          set +e

          # Check each changed .tf file
          while IFS= read -r file; do
            output=$(terraform fmt -check "$file" 2>&1)
            exit_code=$?
            if [ $exit_code -ne 0 ] && [ $exit_code -ne 2 ]; then
              echo "Error checking file: $file"
              echo "Terraform exited with code $exit_code."
              echo "Terraform output: $output"
              # Collect the error message
              failed_files="$failed_files\n❌ \`$file\` could not be checked due to an error. Terraform exited with code $exit_code. Output:\n\`\`\`\n$output\n\`\`\`"
            elif [ $exit_code -eq 2 ]; then
              failed_files="$failed_files\n❌ \`$file\` is not properly formatted. Please run \`terraform fmt $file\` to fix it."
            fi
          done < <(git diff --name-only origin/${{ github.base_ref }} -- | grep '\.tf$')

          # Save failed files list to a file for use in the next step
          echo -e "$failed_files" > fmt-output.txt

          # Set output for use in the next step
          if [ -s fmt-output.txt ]; then
            echo "failed_files=true" >> $GITHUB_OUTPUT
          else
            echo "failed_files=false" >> $GITHUB_OUTPUT
          fi

      # Step 5: Post PR Comment (only if there are failed files)
      - name: Post PR Comment if files failed formatting
        if: ${{ steps.fmt.outputs.failed_files == 'true' }}
        uses: actions/github-script@v6
        with:
          script: |
            const { readFileSync } = require('fs');
            const output = readFileSync('fmt-output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Terraform format check failed for the following files:\n${output}`
            });

      # Step 6: Fail the job if there are failed files
      - name: Fail if files are not formatted
        if: ${{ steps.fmt.outputs.failed_files == 'true' }}
        run: exit 1
