name: Terraform Format Check

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**/*.tf'

jobs:
  terraform_fmt:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.head.repo.full_name, github.repository) # Ensures it's not running on forked repos

    steps:
    # Checkout the PR branch
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 2 # Fetch base branch for comparison

    # Fetch base branch for comparison
    - name: Fetch base branch
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }}
    
    # Get list of modified .tf files
    - name: Get changed .tf files
      id: changed_files
      run: |
        git diff --name-only origin/${{ github.event.pull_request.base.ref }} HEAD | grep '\.tf$' > changed_tf_files.txt || true
        files=$(cat changed_tf_files.txt)
        if [ -z "$files" ]; then
          echo "No .tf files modified, skipping the job."
          exit 0
        fi
        echo "changed_tf_files=$files" >> $GITHUB_ENV

    # Run terraform fmt -check on modified .tf files
    - name: Run terraform fmt -check
      id: terraform_fmt
      run: |
        failed_files=""
        for file in ${{ env.changed_tf_files }}; do
          terraform fmt -check "$file" || failed_files="$failed_files $file"
        done
        echo "failed_files=$failed_files" >> $GITHUB_ENV
        echo "failed_files=$failed_files" >> $GITHUB_OUTPUT

    # Add comment if there are unformatted files
    - name: Comment on PR if formatting fails
      if: ${{ env.failed_files != '' }}
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          The following .tf files are not formatted properly:
          ${{ env.failed_files }}
          
          Please run the following command to format them:
          \`\`\`
          terraform fmt <file-name>
          \`\`\`

    # Fail the job if there are unformatted files
    - name: Fail if there are unformatted files
      if: ${{ env.failed_files != '' }}
      run: exit 1
